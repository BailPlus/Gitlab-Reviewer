# Gitlab Reviewer部署URL
self_url="https://gr.example.com/"

# 数据库相关配置
# 数据库URL，可换用其他数据库，但要先安装响应的库
DATABASE_URL="mysql+pymysql://gitlab_reviewer:password@mysql.server:3306/gitlab_reviewer"

# Gitlab相关配置
# Gitlab URL
gitlab_url="https://gitlab.example.com/"
# 请以管理员身份登录gitlab后，在`管理面板`-`应用`中新增一个应用,
# `scope`勾选`api`即可，`Redirect URI`填写`{self_url}/_/auth/callback`
# 并获取client_id和client_secret，填写以下2个字段
gitlab_client_id="xxxxxxxxxxxxx"
gitlab_client_secret="gloas-xxxxxxxxxxxxxx"
# 管理员访问令牌，用于在用户未登录的情况下，收到评审webhook时，获取任意项目的信息
# 请以管理员身份登录gitlab后，在`个人设置`-`访问令牌`中新增一个令牌，
# `选择范围`勾选`api`即可，并获取令牌，填写以下字段
gitlab_root_private_token="glpat-xxxxxxxxxxxx"
# gitlab防伪token，用于验证webhook请求，自己拟定。
# 会在绑定仓库时自动向仓库添加webhook并配置该token
gitlab_webhook_token='xxxxxxxxxxxx'

# 大模型相关配置。不必是ChaptGPT，只要是支持ChatCompletion接口的模型即可
openai_base_url="https://api.openai.com/v1"
openai_api_key='sk-xxxxxxxxxxxxx'
openai_model='gpt-3.5-turbo'

# 邮件配置
# 是否启用邮件通知。如果填`false`，则下面的其他字段都可以不填
enable_email="true"
smtp_host="smtp.example.com"
smtp_port="465"
smtp_username="user@example.com"
smtp_password="smtp_password"
# smtp加密方式，可选值：`none`,`ssl`,`starttls`
smtp_encryption="ssl"
# 发件人昵称
email_from="Sender Nickname"
